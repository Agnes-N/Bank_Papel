{"version":3,"sources":["user.js"],"names":["signup","req","res","emailExist","body","email","status","send","error","firstName","lastName","bcrypt","hash","password","newUser","console","log","userInsert","pool","query","rows","userGet","token","jwt","sign","id","data","firstname","lastname"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;AAEA,IAAMA,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAG,iBAAOC,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AACPC,YAAAA,UADO,gDAC4CF,GAAG,CAACG,IAAJ,CAASC,KADrD;;AAAA,iBAEVF,UAFU;AAAA;AAAA;AAAA;;AAAA,6CAGJD,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,cAAAA,MAAM,EAAE,GADkB;AAE1BE,cAAAA,KAAK,EAAE;AAFmB,aAArB,CAHI;;AAAA;AAAA,0BASJP,GAAG,CAACG,IAAJ,CAASC,KATL;AAAA,0BAUAJ,GAAG,CAACG,IAAJ,CAASK,SAVT;AAAA,0BAWDR,GAAG,CAACG,IAAJ,CAASM,QAXR;AAAA;AAAA,mBAYKC,mBAAOC,IAAP,CAAYX,GAAG,CAACG,IAAJ,CAASS,QAArB,EAA+B,EAA/B,CAZL;;AAAA;AAAA;AAQPC,YAAAA,OARO;AASXT,cAAAA,KATW;AAUXI,cAAAA,SAVW;AAWXC,cAAAA,QAXW;AAYXG,cAAAA,QAZW;AAAA;AAgBbE,YAAAA,OAAO,CAACC,GAAR,CAAYF,OAAO,CAACD,QAApB;AAEMI,YAAAA,UAlBO,8EAkB0EH,OAAO,CAACT,KAlBlF,gBAkB6FS,OAAO,CAACL,SAlBrG,gBAkBoHK,OAAO,CAACJ,QAlB5H,gBAkB0II,OAAO,CAACD,QAlBlJ;AAAA;AAAA,mBAmBqBK,sBAAKC,KAAL,CAAWF,UAAX,CAnBrB;;AAAA;AAAA;AAAA,8CAmBLG,IAnBK;AAmBEC,YAAAA,OAnBF;AAoBPC,YAAAA,KApBO,GAoBCC,yBAAIC,IAAJ,CAAS;AACrBC,cAAAA,EAAE,EAAEJ,OAAO,CAACI,EADS;AAErBpB,cAAAA,KAAK,EAAEgB,OAAO,CAAChB;AAFM,aAAT,EAGX,eAHW,CApBD;AAyBbH,YAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBD,cAAAA,MAAM,EAAE,GADW;AAEnBoB,cAAAA,IAAI,EAAE;AACJJ,gBAAAA,KAAK,EAALA,KADI;AAEJG,gBAAAA,EAAE,EAAEJ,OAAO,CAACI,EAFR;AAGJhB,gBAAAA,SAAS,EAAEY,OAAO,CAACM,SAHf;AAIJjB,gBAAAA,QAAQ,EAAEW,OAAO,CAACO,QAJd;AAKJvB,gBAAAA,KAAK,EAAEgB,OAAO,CAAChB;AALX;AAFa,aAArB;;AAzBa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAANL,MAAM;AAAA;AAAA;AAAA,GAAZ;;eAqCeA,M","sourceRoot":"/home/agnes/Documents/Bank_Papel/server/controllers","sourcesContent":["import bcrypt from 'bcrypt';\nimport pool from '../config/db_config';\nimport '@babel/polyfill';\nimport '@babel/plugin-transform-regenerator';\nimport jwt from 'jsonwebtoken';\n\nconst signup = async (req, res) => {\n  const emailExist = `SELECT * FROM users WHERE email = '${req.body.email}';`;\n  if(emailExist){\n    return res.status(409).send({\n      status: 409,\n      error: 'Email already exists',\n    })\n  }  \n  const newUser = {\n    email: req.body.email,\n    firstName: req.body.firstName,\n    lastName: req.body.lastName,\n    password: await bcrypt.hash(req.body.password, 10),\n\n\n  };\n  console.log(newUser.password);\n\n  const userInsert = `INSERT INTO users (email, firstName, lastName, password) VALUES('${newUser.email}','${newUser.firstName}','${newUser.lastName}','${newUser.password}') RETURNING *;`;\n  const { rows: [userGet] } = await pool.query(userInsert);\n  const token = jwt.sign({\n    id: userGet.id,\n    email: userGet.email,\n  }, 'jwtprivatekey');\n\n  res.status(201).send({\n    status: 201,\n    data: {\n      token,\n      id: userGet.id,\n      firstName: userGet.firstname,\n      lastName: userGet.lastname,\n      email: userGet.email,\n    },\n  });\n};\n\nexport default signup;\n"]}