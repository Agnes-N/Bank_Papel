{"version":3,"sources":["user.js"],"names":["Users","signup","req","res","emailExist","body","email","pool","query","rows","foundEmail","status","send","error","firstName","lastName","bcrypt","hash","password","newUser","userInsert","userGet","token","jwt","sign","id","data","firstname","lastname"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;AAGA,IAAMA,KAAK,GAAG;AACNC,EAAAA,MADM,kBACCC,GADD,EACMC,GADN,EACW;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AACfC,cAAAA,UADe,gDACoCF,GAAG,CAACG,IAAJ,CAASC,KAD7C;AAAA;AAAA,qBAEgBC,sBAAKC,KAAL,CAAWJ,UAAX,CAFhB;;AAAA;AAAA;AAAA,8CAEbK,IAFa;AAENC,cAAAA,UAFM;;AAAA,mBAIjBA,UAJiB;AAAA;AAAA;AAAA;;AAAA,+CAKZP,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,gBAAAA,MAAM,EAAE,GADkB;AAE1BE,gBAAAA,KAAK,EAAE;AAFmB,eAArB,CALY;;AAAA;AAAA,4BAWZX,GAAG,CAACG,IAAJ,CAASC,KAXG;AAAA,4BAYRJ,GAAG,CAACG,IAAJ,CAASS,SAZD;AAAA,4BAaTZ,GAAG,CAACG,IAAJ,CAASU,QAbA;AAAA;AAAA,qBAcHC,mBAAOC,IAAP,CAAYf,GAAG,CAACG,IAAJ,CAASa,QAArB,EAA+B,EAA/B,CAdG;;AAAA;AAAA;AAUfC,cAAAA,OAVe;AAWnBb,gBAAAA,KAXmB;AAYnBQ,gBAAAA,SAZmB;AAanBC,gBAAAA,QAbmB;AAcnBG,gBAAAA,QAdmB;AAAA;AAiBfE,cAAAA,UAjBe,8EAiBkED,OAAO,CAACb,KAjB1E,gBAiBqFa,OAAO,CAACL,SAjB7F,gBAiB4GK,OAAO,CAACJ,QAjBpH,gBAiBkII,OAAO,CAACD,QAjB1I;AAAA;AAAA,qBAkBaX,sBAAKC,KAAL,CAAWY,UAAX,CAlBb;;AAAA;AAAA;AAAA,gDAkBbX,IAlBa;AAkBNY,cAAAA,OAlBM;AAmBfC,cAAAA,KAnBe,GAmBPC,yBAAIC,IAAJ,CAAS;AACrBC,gBAAAA,EAAE,EAAEJ,OAAO,CAACI,EADS;AAErBnB,gBAAAA,KAAK,EAAEe,OAAO,CAACf;AAFM,eAAT,EAGX,eAHW,CAnBO;AAwBrBH,cAAAA,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBD,gBAAAA,MAAM,EAAE,GADW;AAEnBe,gBAAAA,IAAI,EAAE;AACJJ,kBAAAA,KAAK,EAALA,KADI;AAEJG,kBAAAA,EAAE,EAAEJ,OAAO,CAACI,EAFR;AAGJX,kBAAAA,SAAS,EAAEO,OAAO,CAACM,SAHf;AAIJZ,kBAAAA,QAAQ,EAAEM,OAAO,CAACO,QAJd;AAKJtB,kBAAAA,KAAK,EAAEe,OAAO,CAACf;AALX;AAFa,eAArB;;AAxBqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkCtB;AAnCW,CAAd;eAuCeN,K","sourceRoot":"/home/agnes/Documents/Bank_Papel/server/controllers","sourcesContent":["import bcrypt from 'bcrypt';\nimport jwt from 'jsonwebtoken';\nimport pool from '../config/db_config';\nimport '@babel/polyfill';\nimport '@babel/plugin-transform-regenerator';\n\n\nconst Users = {\n  async signup(req, res) {\n    const emailExist = `SELECT * FROM users WHERE email = '${req.body.email}';`;\n    const { rows: [foundEmail] } = await pool.query(emailExist);\n\n    if (foundEmail) {\n      return res.status(409).send({\n        status: 409,\n        error: 'Email already exists',\n      });\n    }\n    const newUser = {\n      email: req.body.email,\n      firstName: req.body.firstName,\n      lastName: req.body.lastName,\n      password: await bcrypt.hash(req.body.password, 10),\n    };\n\n    const userInsert = `INSERT INTO users (email, firstName, lastName, password) VALUES('${newUser.email}','${newUser.firstName}','${newUser.lastName}','${newUser.password}') RETURNING *;`;\n    const { rows: [userGet] } = await pool.query(userInsert);\n    const token = jwt.sign({\n      id: userGet.id,\n      email: userGet.email,\n    }, 'jwtprivatekey');\n\n    res.status(201).send({\n      status: 201,\n      data: {\n        token,\n        id: userGet.id,\n        firstName: userGet.firstname,\n        lastName: userGet.lastname,\n        email: userGet.email,\n      },\n    });\n  },\n};\n\n\nexport default Users;\n"]}