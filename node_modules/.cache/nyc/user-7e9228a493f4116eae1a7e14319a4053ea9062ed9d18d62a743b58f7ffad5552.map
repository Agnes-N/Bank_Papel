{"version":3,"sources":["user.js"],"names":["Users","signup","req","res","emailExist","body","email","status","send","error","firstName","lastName","bcrypt","hash","password","newUser","userInsert","pool","query","rows","userGet","token","jwt","sign","id","data","firstname","lastname","login"],"mappings":"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","sourceRoot":"/home/agnes/Documents/Bank_Papel/server/controllers","sourcesContent":["import bcrypt from 'bcrypt';\nimport jwt from 'jsonwebtoken';\nimport pool from '../config/db_config';\nimport '@babel/polyfill';\nimport '@babel/plugin-transform-regenerator';\n\n\nconst Users = {\n  async signup(req, res) {\n    const emailExist = `SELECT * FROM users WHERE email = '${req.body.email}';`;\n\n    if (emailExist) {\n      return res.status(409).send({\n        status: 409,\n        error: 'Email already exists',\n      });\n    }\n    const newUser = {\n      email: req.body.email,\n      firstName: req.body.firstName,\n      lastName: req.body.lastName,\n      password: await bcrypt.hash(req.body.password, 10),\n    };\n\n    const userInsert = `INSERT INTO users (email, firstName, lastName, password) VALUES('${newUser.email}','${newUser.firstName}','${newUser.lastName}','${newUser.password}') RETURNING *;`;\n    const { rows: [userGet] } = await pool.query(userInsert);\n    const token = jwt.sign({\n      id: userGet.id,\n      email: userGet.email,\n    }, 'jwtprivatekey');\n\n    res.status(201).send({\n      status: 201,\n      data: {\n        token,\n        id: userGet.id,\n        firstName: userGet.firstname,\n        lastName: userGet.lastname,\n        email: userGet.email,\n      },\n    });\n  },\n\n  async login(req, res) {\n    const emailExist = `SELECT * FROM users WHERE email = '${req.body.email}';`;\n\n    if (emailExist) {\n      return res.status(409).send({\n        status: 409,\n        error: 'Email already exists',\n      });\n    }\n    const newUser = {\n      email: req.body.email,\n      firstName: req.body.firstName,\n      lastName: req.body.lastName,\n      password: await bcrypt.hash(req.body.password, 10),\n    };\n\n    const userInsert = `INSERT INTO users (email, firstName, lastName, password) VALUES('${newUser.email}','${newUser.firstName}','${newUser.lastName}','${newUser.password}') RETURNING *;`;\n    const { rows: [userGet] } = await pool.query(userInsert);\n    const token = jwt.sign({\n      id: userGet.id,\n      email: userGet.email,\n    }, 'jwtprivatekey');\n\n    res.status(201).send({\n      status: 201,\n      data: {\n        token,\n        id: userGet.id,\n        firstName: userGet.firstname,\n        lastName: userGet.lastname,\n        email: userGet.email,\n      },\n    });\n  },\n\n};\n\n\nexport default Users;\n"]}