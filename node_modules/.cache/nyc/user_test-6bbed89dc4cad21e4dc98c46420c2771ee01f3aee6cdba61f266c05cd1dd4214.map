{"version":3,"sources":["user_test.js"],"names":["chai","should","use","chaiHttp","done","request","app","post","send","users","err","res","to","have","status","equal"],"mappings":";;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;AAEAA,iBAAKC,MAAL;;AACAD,iBAAKE,GAAL,CAASC,oBAAT;;AAEA,qBAAS,aAAT,EAAwB,YAAM;AAC5B,iBAAG,sBAAH,EAA2B,UAACC,IAAD,EAAU;AACnCJ,qBAAKK,OAAL,CAAaC,eAAb,EACGC,IADH,CACQ,cADR,EAEGC,IAFH,CAEQC,qBAAM,CAAN,CAFR,EAGGD,IAHH,CAGQ,UAACE,GAAD,EAAMC,GAAN,EAAc;AAClB,wBAAOA,GAAP,EAAYC,EAAZ,CAAeC,IAAf,CAAoBC,MAApB,CAA2B,GAA3B;AACAV,MAAAA,IAAI;AACL,KANH;AAOD,GARD;AAUA,iBAAG,sBAAH,EAA2B,UAACA,IAAD,EAAU;AACnCJ,qBAAKK,OAAL,CAAaC,eAAb,EACGC,IADH,CACQ,cADR,EAEGC,IAFH,CAEQC,qBAAM,CAAN,CAFR,EAGGD,IAHH,CAGQ,UAACE,GAAD,EAAMC,GAAN,EAAc;AAClB,wBAAOA,GAAP,EAAYC,EAAZ,CAAeC,IAAf,CAAoBC,MAApB,CAA2B,GAA3B;AACAV,MAAAA,IAAI;AACL,KANH;AAOD,GARD;AAUA,iBAAG,uCAAH,EAA4C,UAACA,IAAD,EAAU;AACpDJ,qBAAKK,OAAL,CAAaC,eAAb,EACGC,IADH,CACQ,cADR,EAEGC,IAFH,CAEQC,qBAAM,CAAN,CAFR,EAGGD,IAHH,CAGQ,UAACE,GAAD,EAAMC,GAAN,EAAc;AAClB,wBAAOA,GAAP,EAAYC,EAAZ,CAAeC,IAAf,CAAoBC,MAApB,CAA2B,GAA3B;AACAV,MAAAA,IAAI;AACL,KANH;AAOD,GARD;AAUA,iBAAG,kDAAH,EAAuD,UAACA,IAAD,EAAU;AAC/DJ,qBAAKK,OAAL,CAAaC,eAAb,EACGC,IADH,CACQ,cADR,EAEGC,IAFH,CAEQC,qBAAM,CAAN,CAFR,EAGGD,IAHH,CAGQ,UAACE,GAAD,EAAMC,GAAN,EAAc;AAClB,wBAAOA,GAAP,EAAYC,EAAZ,CAAeC,IAAf,CAAoBC,MAApB,CAA2B,GAA3B;AACAV,MAAAA,IAAI;AACL,KANH;AAOD,GARD;AAUA,iBAAG,8DAAH,EAAmE,UAACA,IAAD,EAAU;AAC3EJ,qBAAKK,OAAL,CAAaC,eAAb,EACGC,IADH,CACQ,cADR,EAEGC,IAFH,CAEQC,qBAAM,CAAN,CAFR,EAGGD,IAHH,CAGQ,UAACE,GAAD,EAAMC,GAAN,EAAc;AAClB,wBAAOA,GAAP,EAAYC,EAAZ,CAAeG,KAAf,CAAqB,GAArB;AACAX,MAAAA,IAAI;AACL,KANH;AAOD,GARD;AAUA,iBAAG,iDAAH,EAAsD,UAACA,IAAD,EAAU;AAC9DJ,qBAAKK,OAAL,CAAaC,eAAb,EACGC,IADH,CACQ,cADR,EAEGC,IAFH,CAEQC,qBAAM,CAAN,CAFR,EAGGD,IAHH,CAGQ,UAACE,GAAD,EAAMC,GAAN,EAAc;AAClB,wBAAOA,GAAP,EAAYC,EAAZ,CAAeC,IAAf,CAAoBC,MAApB,CAA2B,GAA3B;AACAV,MAAAA,IAAI;AACL,KANH;AAOD,GARD;AASD,CA5DD","sourceRoot":"/home/agnes/Documents/Bank_Papel/server/tests","sourcesContent":["import chai, { expect } from 'chai';\nimport { describe, it } from 'mocha';\nimport chaiHttp from 'chai-http';\nimport app from '../app';\nimport 'dotenv';\nimport users from '../models/testUser';\n\nchai.should();\nchai.use(chaiHttp);\n\ndescribe('test signup', () => {\n  it('should signup a user', (done) => {\n    chai.request(app)\n      .post('/auth/signup')\n      .send(users[0])\n      .send((err, res) => {\n        expect(res).to.have.status(201);\n        done();\n      });\n  });\n\n  it('email already exists', (done) => {\n    chai.request(app)\n      .post('/auth/signup')\n      .send(users[1])\n      .send((err, res) => {\n        expect(res).to.have.status(409);\n        done();\n      });\n  });\n\n  it('should not be empty, enter your email', (done) => {\n    chai.request(app)\n      .post('/auth/signup')\n      .send(users[2])\n      .send((err, res) => {\n        expect(res).to.have.status(400);\n        done();\n      });\n  });\n\n  it('could not signup, you should enter a valid email', (done) => {\n    chai.request(app)\n      .post('/auth/signup')\n      .send(users[3])\n      .send((err, res) => {\n        expect(res).to.have.status(400);\n        done();\n      });\n  });\n\n  it('could not signup, name must contain alpha numeric characters', (done) => {\n    chai.request(app)\n      .post('/auth/signup')\n      .send(users[4])\n      .send((err, res) => {\n        expect(res).to.equal(400);\n        done();\n      });\n  });\n\n  it('could not signup, you shoud enter your password', (done) => {\n    chai.request(app)\n      .post('/auth/signup')\n      .send(users[4])\n      .send((err, res) => {\n        expect(res).to.have.status(400);\n        done();\n      });\n  });\n});\n"]}